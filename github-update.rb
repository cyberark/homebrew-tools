require 'net/http'
require 'uri'
require 'json'

# Get release info from github
# Extracted into a class so it can be shared by multiple formulae.

class GithubUpdate
  def self.doUpdate(repo)
    # Find the latest release
    releases_uri = URI.parse("https://api.github.com/repos/#{repo}/releases")
    releases_response = Net::HTTP.get_response releases_uri
    releases = JSON.parse(releases_response.body)
    latest = releases[0]
    ver = latest["tag_name"].delete_prefix("v")

    # Get list of artifacts from release
    artifacts_uri = URI.parse(latest["assets_url"])
    artifacts_response = JSON.parse((Net::HTTP.get_response artifacts_uri).body)

    # Download hashes file generated by goreleaser
    hashes_uri = URI.parse("https://github.com/#{repo}/releases/download/v#{ver}/SHA256SUMS.txt")
    hashes_redirect = Net::HTTP.get_response hashes_uri
    hashes_next_location = hashes_redirect.header['location']
    hashes_txt = (Net::HTTP.get_response(URI.parse(hashes_next_location))).body

    # Parse hashes file into { file => {'hash' => hash}}
    artifacts = {}
    for line in hashes_txt.split("\n") do
    hash, file = line.split()
    artifacts[file] = {"hash" => hash}
    end

    # Add download url to each artifact
    # Now we have { file => {'hash' => hash, 'url' => url}}
    for artifact in artifacts_response do
      name = artifact['name']
      if artifacts.key? name
          artifacts[name]['url'] = artifact['browser_download_url']
      end
    end
    return ver, artifacts
  end

  def self.arch(type)
    return {
      "intel" => "amd64",
      "arm" => "arm64"
    }[String(type)]
  end
end
